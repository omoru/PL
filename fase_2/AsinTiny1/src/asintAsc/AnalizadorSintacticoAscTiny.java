
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 22 19:44:45 CEST 2021
//----------------------------------------------------

package asintAsc;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 22 19:44:45 CEST 2021
  */
public class AnalizadorSintacticoAscTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoAscTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAscTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAscTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\006\000\002" +
    "\011\005\000\002\012\005\000\002\012\003\000\002\012" +
    "\002\000\002\013\005\000\002\013\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\010\000\002\017" +
    "\006\000\002\020\004\000\002\021\005\000\002\021\003" +
    "\000\002\022\004\000\002\023\005\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\005\000\002\026\007\000" +
    "\002\027\011\000\002\030\007\000\002\031\003\000\002" +
    "\031\002\000\002\032\004\000\002\033\004\000\002\034" +
    "\003\000\002\035\004\000\002\036\004\000\002\037\007" +
    "\000\002\040\005\000\002\040\003\000\002\040\002\000" +
    "\002\041\003\000\002\042\005\000\002\042\004\000\002" +
    "\043\005\000\002\043\005\000\002\043\003\000\002\044" +
    "\005\000\002\044\003\000\002\045\005\000\002\045\003" +
    "\000\002\046\005\000\002\046\003\000\002\047\004\000" +
    "\002\047\004\000\002\047\003\000\002\050\004\000\002" +
    "\050\003\000\002\051\004\000\002\051\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\005\000\002\053\005\000\002\053\004\000\002" +
    "\053\004\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\060\006\014\007\ufffe\010\011\011\010\012" +
    "\ufffe\025\ufffe\030\ufffe\034\ufffe\040\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002" +
    "\000\006\004\ufffb\005\ufffb\001\002\000\006\004\ufffa\005" +
    "\ufffa\001\002\000\004\002\246\001\002\000\006\004\243" +
    "\005\244\001\002\000\004\007\226\001\002\000\022\007" +
    "\017\016\022\017\027\020\031\021\025\022\024\027\023" +
    "\032\016\001\002\000\052\007\077\012\062\025\061\030" +
    "\123\034\072\040\120\043\070\044\057\045\114\046\103" +
    "\047\100\050\053\052\071\053\101\054\065\055\122\056" +
    "\052\057\055\060\054\061\076\001\002\000\006\004\ufffc" +
    "\005\ufffc\001\002\000\022\007\017\016\022\017\027\020" +
    "\031\021\025\022\024\027\023\032\016\001\002\000\006" +
    "\004\ufff9\005\ufff9\001\002\000\022\007\017\016\022\017" +
    "\027\020\031\021\025\022\024\027\023\032\016\001\002" +
    "\000\006\007\uffeb\015\uffeb\001\002\000\006\007\uffed\015" +
    "\uffed\001\002\000\006\007\uffec\015\uffec\001\002\000\006" +
    "\007\uffea\015\uffea\001\002\000\004\030\041\001\002\000" +
    "\004\023\034\001\002\000\006\007\uffe7\015\uffe7\001\002" +
    "\000\004\007\033\001\002\000\006\007\uffe9\015\uffe9\001" +
    "\002\000\006\007\uffef\015\uffef\001\002\000\006\007\uffe8" +
    "\015\uffe8\001\002\000\006\007\uffee\015\uffee\001\002\000" +
    "\006\004\ufff8\005\ufff8\001\002\000\004\025\035\001\002" +
    "\000\004\024\036\001\002\000\004\026\037\001\002\000" +
    "\022\007\017\016\022\017\027\020\031\021\025\022\024" +
    "\027\023\032\016\001\002\000\006\007\uffe6\015\uffe6\001" +
    "\002\000\022\007\017\016\022\017\027\020\031\021\025" +
    "\022\024\027\023\032\016\001\002\000\004\007\050\001" +
    "\002\000\006\005\uffe2\031\uffe2\001\002\000\006\005\045" +
    "\031\046\001\002\000\022\007\017\016\022\017\027\020" +
    "\031\021\025\022\024\027\023\032\016\001\002\000\006" +
    "\007\uffe5\015\uffe5\001\002\000\006\005\uffe3\031\uffe3\001" +
    "\002\000\006\005\uffe1\031\uffe1\001\002\000\006\007\uffe4" +
    "\015\uffe4\001\002\000\072\002\uffae\005\uffae\013\uffae\014" +
    "\uffae\023\uffae\024\uffae\031\uffae\033\uffae\035\uffae\036\uffae" +
    "\037\uffae\041\uffae\042\uffae\051\uffae\052\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\001\002\000" +
    "\004\007\215\001\002\000\072\002\uffab\005\uffab\013\uffab" +
    "\014\uffab\023\uffab\024\uffab\031\uffab\033\uffab\035\uffab\036" +
    "\uffab\037\uffab\041\uffab\042\uffab\051\uffab\052\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\001\002" +
    "\000\072\002\uffad\005\uffad\013\uffad\014\uffad\023\uffad\024" +
    "\uffad\031\uffad\033\uffad\035\uffad\036\uffad\037\uffad\041\uffad" +
    "\042\uffad\051\uffad\052\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\001\002\000\016\002\uffd5\005" +
    "\uffd5\031\uffd5\036\uffd5\037\uffd5\042\uffd5\001\002\000\030" +
    "\007\077\012\062\025\061\052\071\053\101\054\065\055" +
    "\122\056\052\057\055\060\054\061\076\001\002\000\010" +
    "\002\001\005\136\031\001\001\002\000\072\002\uffb1\005" +
    "\uffb1\013\uffb1\014\uffb1\023\uffb1\024\uffb1\031\uffb1\033\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\041\uffb1\042\uffb1\051\uffb1\052" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\001\002\000\030\007\077\012\062\025\061\052\071" +
    "\053\101\054\065\055\122\056\052\057\055\060\054\061" +
    "\076\001\002\000\016\002\uffde\005\uffde\031\uffde\036\uffde" +
    "\037\uffde\042\uffde\001\002\000\016\002\uffd7\005\uffd7\031" +
    "\uffd7\036\uffd7\037\uffd7\042\uffd7\001\002\000\072\002\uffb0" +
    "\005\uffb0\013\uffb0\014\uffb0\023\uffb0\024\uffb0\031\uffb0\033" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\051\uffb0" +
    "\052\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\001\002\000\016\002\uffdc\005\uffdc\031\uffdc\036" +
    "\uffdc\037\uffdc\042\uffdc\001\002\000\016\002\uffd9\005\uffd9" +
    "\031\uffd9\036\uffd9\037\uffd9\042\uffd9\001\002\000\030\007" +
    "\077\012\062\025\061\052\071\053\101\054\065\055\122" +
    "\056\052\057\055\060\054\061\076\001\002\000\024\007" +
    "\077\012\062\025\061\054\065\055\122\056\052\057\055" +
    "\060\054\061\076\001\002\000\030\007\077\012\062\025" +
    "\061\052\071\053\101\054\065\055\122\056\052\057\055" +
    "\060\054\061\076\001\002\000\016\002\uffda\005\uffda\031" +
    "\uffda\036\uffda\037\uffda\042\uffda\001\002\000\016\002\uffd6" +
    "\005\uffd6\031\uffd6\036\uffd6\037\uffd6\042\uffd6\001\002\000" +
    "\016\002\uffd4\005\uffd4\031\uffd4\036\uffd4\037\uffd4\042\uffd4" +
    "\001\002\000\024\007\077\012\062\025\061\054\065\055" +
    "\122\056\052\057\055\060\054\061\076\001\002\000\072" +
    "\002\uffac\005\uffac\013\uffac\014\uffac\023\uffac\024\uffac\031" +
    "\uffac\033\uffac\035\uffac\036\uffac\037\uffac\041\uffac\042\uffac" +
    "\051\uffac\052\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\001\002\000\030\007\077\012\062\025" +
    "\061\052\071\053\101\054\065\055\122\056\052\057\055" +
    "\060\054\061\076\001\002\000\030\007\077\012\062\025" +
    "\061\052\071\053\101\054\065\055\122\056\052\057\055" +
    "\060\054\061\076\001\002\000\016\002\uffc4\005\uffc4\031" +
    "\uffc4\036\uffc4\037\uffc4\042\uffc4\001\002\000\030\007\077" +
    "\012\062\025\061\052\071\053\101\054\065\055\122\056" +
    "\052\057\055\060\054\061\076\001\002\000\016\002\uffdb" +
    "\005\uffdb\031\uffdb\036\uffdb\037\uffdb\042\uffdb\001\002\000" +
    "\072\002\uffb2\005\uffb2\013\uffb2\014\uffb2\023\uffb2\024\uffb2" +
    "\031\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2\042" +
    "\uffb2\051\uffb2\052\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\001\002\000\072\002\uffb4\005\uffb4" +
    "\013\uffb4\014\uffb4\023\uffb4\024\uffb4\031\uffb4\033\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4\051\uffb4\052\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4" +
    "\001\002\000\072\002\uffb6\005\uffb6\013\uffb6\014\uffb6\023" +
    "\170\024\uffb6\031\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\041\uffb6\042\uffb6\051\uffb6\052\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\166\075\167\001\002\000\064\002" +
    "\uffb9\005\uffb9\013\uffb9\014\uffb9\024\uffb9\031\uffb9\033\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\041\uffb9\042\uffb9\051\uffb9\052" +
    "\uffb9\061\160\062\162\063\161\064\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\001\002\000" +
    "\056\002\uffbb\005\uffbb\013\uffbb\014\uffbb\024\uffbb\031\uffbb" +
    "\033\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb\051" +
    "\uffbb\052\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\001\002\000\016\002\uffd8\005" +
    "\uffd8\031\uffd8\036\uffd8\037\uffd8\042\uffd8\001\002\000\056" +
    "\002\uffbd\005\uffbd\013\uffbd\014\uffbd\024\uffbd\031\uffbd\033" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\051\uffbd" +
    "\052\uffbd\064\147\065\151\066\154\067\155\070\153\071" +
    "\152\072\uffbd\073\uffbd\001\002\000\016\002\uffcb\005\uffcb" +
    "\031\uffcb\036\uffcb\037\uffcb\042\uffcb\001\002\000\016\002" +
    "\uffdf\005\uffdf\031\uffdf\036\uffdf\037\uffdf\042\uffdf\001\002" +
    "\000\042\002\uffbf\005\uffbf\013\uffbf\014\uffbf\024\uffbf\031" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\051\140\052\143\072\141\073\144\001\002\000\016\002" +
    "\uffdd\005\uffdd\031\uffdd\036\uffdd\037\uffdd\042\uffdd\001\002" +
    "\000\030\007\077\012\062\025\061\052\071\053\101\054" +
    "\065\055\122\056\052\057\055\060\054\061\076\001\002" +
    "\000\004\033\127\001\002\000\072\002\uffaf\005\uffaf\013" +
    "\uffaf\014\uffaf\023\uffaf\024\uffaf\031\uffaf\033\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\041\uffaf\042\uffaf\051\uffaf\052\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001" +
    "\002\000\062\006\014\007\ufffe\010\011\011\010\012\ufffe" +
    "\025\ufffe\030\ufffe\031\125\034\ufffe\040\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\001" +
    "\002\000\004\031\126\001\002\000\020\002\uffc2\004\uffc2" +
    "\005\uffc2\031\uffc2\036\uffc2\037\uffc2\042\uffc2\001\002\000" +
    "\020\002\uffc3\004\uffc3\005\uffc3\031\uffc3\036\uffc3\037\uffc3" +
    "\042\uffc3\001\002\000\030\007\077\012\062\025\061\052" +
    "\071\053\101\054\065\055\122\056\052\057\055\060\054" +
    "\061\076\001\002\000\016\002\uffd3\005\uffd3\031\uffd3\036" +
    "\uffd3\037\uffd3\042\uffd3\001\002\000\004\041\132\001\002" +
    "\000\054\007\077\012\062\025\061\030\123\034\072\040" +
    "\120\042\uffce\043\070\044\057\045\114\046\103\047\100" +
    "\050\053\052\071\053\101\054\065\055\122\056\052\057" +
    "\055\060\054\061\076\001\002\000\012\005\136\036\uffcf" +
    "\037\uffcf\042\uffcf\001\002\000\004\042\135\001\002\000" +
    "\016\002\uffd0\005\uffd0\031\uffd0\036\uffd0\037\uffd0\042\uffd0" +
    "\001\002\000\052\007\077\012\062\025\061\030\123\034" +
    "\072\040\120\043\070\044\057\045\114\046\103\047\100" +
    "\050\053\052\071\053\101\054\065\055\122\056\052\057" +
    "\055\060\054\061\076\001\002\000\016\002\uffe0\005\uffe0" +
    "\031\uffe0\036\uffe0\037\uffe0\042\uffe0\001\002\000\030\007" +
    "\077\012\062\025\061\052\071\053\101\054\065\055\122" +
    "\056\052\057\055\060\054\061\076\001\002\000\030\007" +
    "\uff9d\012\uff9d\025\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\001\002\000\030\007" +
    "\077\012\062\025\061\052\071\053\101\054\065\055\122" +
    "\056\052\057\055\060\054\061\076\001\002\000\030\007" +
    "\077\012\062\025\061\052\071\053\101\054\065\055\122" +
    "\056\052\057\055\060\054\061\076\001\002\000\030\007" +
    "\uff9c\012\uff9c\025\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002\000\036\002" +
    "\uffc0\005\uffc0\013\uffc0\014\uffc0\024\uffc0\031\uffc0\033\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0\072\141\073" +
    "\144\001\002\000\056\002\uffbe\005\uffbe\013\uffbe\014\uffbe" +
    "\024\uffbe\031\uffbe\033\uffbe\035\uffbe\036\uffbe\037\uffbe\041" +
    "\uffbe\042\uffbe\051\uffbe\052\uffbe\064\147\065\151\066\154" +
    "\067\155\070\153\071\152\072\uffbe\073\uffbe\001\002\000" +
    "\030\007\uffa3\012\uffa3\025\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\001\002\000" +
    "\030\007\077\012\062\025\061\052\071\053\101\054\065" +
    "\055\122\056\052\057\055\060\054\061\076\001\002\000" +
    "\030\007\uffa2\012\uffa2\025\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\001\002\000" +
    "\030\007\uff9f\012\uff9f\025\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\001\002\000" +
    "\030\007\uff9e\012\uff9e\025\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\001\002\000" +
    "\030\007\uffa1\012\uffa1\025\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\001\002\000" +
    "\030\007\uffa0\012\uffa0\025\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\001\002\000" +
    "\056\002\uffbc\005\uffbc\013\uffbc\014\uffbc\024\uffbc\031\uffbc" +
    "\033\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\051" +
    "\uffbc\052\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\001\002\000\032\002\uffc1\005" +
    "\uffc1\013\uffc1\014\uffc1\024\uffc1\031\uffc1\033\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\041\uffc1\042\uffc1\001\002\000\030\007" +
    "\uffa6\012\uffa6\025\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000\030\007" +
    "\uffa4\012\uffa4\025\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\001\002\000\030\007" +
    "\uffa5\012\uffa5\025\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002\000\030\007" +
    "\077\012\062\025\061\052\071\053\101\054\065\055\122" +
    "\056\052\057\055\060\054\061\076\001\002\000\056\002" +
    "\uffba\005\uffba\013\uffba\014\uffba\024\uffba\031\uffba\033\uffba" +
    "\035\uffba\036\uffba\037\uffba\041\uffba\042\uffba\051\uffba\052" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\001\002\000\072\002\uffb5\005\uffb5\013" +
    "\uffb5\014\uffb5\023\uffb5\024\uffb5\031\uffb5\033\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\041\uffb5\042\uffb5\051\uffb5\052\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001" +
    "\002\000\004\007\174\001\002\000\004\007\173\001\002" +
    "\000\030\007\077\012\062\025\061\052\071\053\101\054" +
    "\065\055\122\056\052\057\055\060\054\061\076\001\002" +
    "\000\004\024\172\001\002\000\072\002\uffa9\005\uffa9\013" +
    "\uffa9\014\uffa9\023\uffa9\024\uffa9\031\uffa9\033\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\041\uffa9\042\uffa9\051\uffa9\052\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\001" +
    "\002\000\072\002\uffa7\005\uffa7\013\uffa7\014\uffa7\023\uffa7" +
    "\024\uffa7\031\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7\041" +
    "\uffa7\042\uffa7\051\uffa7\052\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\001\002\000\072\002\uffa8" +
    "\005\uffa8\013\uffa8\014\uffa8\023\uffa8\024\uffa8\031\uffa8\033" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\041\uffa8\042\uffa8\051\uffa8" +
    "\052\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\001\002\000\016\002\uffca\005\uffca\031\uffca\036" +
    "\uffca\037\uffca\042\uffca\001\002\000\064\002\uffb7\005\uffb7" +
    "\013\uffb7\014\uffb7\024\uffb7\031\uffb7\033\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\041\uffb7\042\uffb7\051\uffb7\052\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\001\002\000\016\002\uffc9" +
    "\005\uffc9\031\uffc9\036\uffc9\037\uffc9\042\uffc9\001\002\000" +
    "\072\002\uffb3\005\uffb3\013\uffb3\014\uffb3\023\uffb3\024\uffb3" +
    "\031\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3\042" +
    "\uffb3\051\uffb3\052\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\001\002\000\004\035\202\001\002" +
    "\000\056\007\077\012\062\025\061\030\123\034\072\036" +
    "\uffce\037\uffce\040\120\043\070\044\057\045\114\046\103" +
    "\047\100\050\053\052\071\053\101\054\065\055\122\056" +
    "\052\057\055\060\054\061\076\001\002\000\006\036\205" +
    "\037\204\001\002\000\016\002\uffd2\005\uffd2\031\uffd2\036" +
    "\uffd2\037\uffd2\042\uffd2\001\002\000\054\007\077\012\062" +
    "\025\061\030\123\034\072\037\uffce\040\120\043\070\044" +
    "\057\045\114\046\103\047\100\050\053\052\071\053\101" +
    "\054\065\055\122\056\052\057\055\060\054\061\076\001" +
    "\002\000\004\037\207\001\002\000\016\002\uffd1\005\uffd1" +
    "\031\uffd1\036\uffd1\037\uffd1\042\uffd1\001\002\000\072\002" +
    "\uffb8\005\uffb8\013\uffb8\014\uffb8\023\170\024\uffb8\031\uffb8" +
    "\033\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\051" +
    "\uffb8\052\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\166\075\167\001\002\000\016\002\uffcd\005\uffcd\031\uffcd" +
    "\036\uffcd\037\uffcd\042\uffcd\001\002\000\004\013\213\001" +
    "\002\000\072\002\uffaa\005\uffaa\013\uffaa\014\uffaa\023\uffaa" +
    "\024\uffaa\031\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\051\uffaa\052\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\074\uffaa\075\uffaa\001\002\000\016\002\uffcc" +
    "\005\uffcc\031\uffcc\036\uffcc\037\uffcc\042\uffcc\001\002\000" +
    "\004\012\216\001\002\000\034\007\077\012\062\013\uffc5" +
    "\014\uffc5\025\061\052\071\053\101\054\065\055\122\056" +
    "\052\057\055\060\054\061\076\001\002\000\006\013\uffc6" +
    "\014\uffc6\001\002\000\006\013\222\014\221\001\002\000" +
    "\030\007\077\012\062\025\061\052\071\053\101\054\065" +
    "\055\122\056\052\057\055\060\054\061\076\001\002\000" +
    "\016\002\uffc8\005\uffc8\031\uffc8\036\uffc8\037\uffc8\042\uffc8" +
    "\001\002\000\006\013\uffc7\014\uffc7\001\002\000\004\007" +
    "\225\001\002\000\006\004\ufff7\005\ufff7\001\002\000\004" +
    "\012\227\001\002\000\026\007\017\013\ufff2\014\ufff2\016" +
    "\022\017\027\020\031\021\025\022\024\027\023\032\016" +
    "\001\002\000\004\030\123\001\002\000\006\004\ufff6\005" +
    "\ufff6\001\002\000\006\013\241\014\240\001\002\000\006" +
    "\007\236\015\235\001\002\000\006\013\ufff3\014\ufff3\001" +
    "\002\000\004\007\237\001\002\000\006\013\ufff0\014\ufff0" +
    "\001\002\000\006\013\ufff1\014\ufff1\001\002\000\022\007" +
    "\017\016\022\017\027\020\031\021\025\022\024\027\023" +
    "\032\016\001\002\000\004\030\ufff5\001\002\000\006\013" +
    "\ufff4\014\ufff4\001\002\000\052\007\uffff\012\uffff\025\uffff" +
    "\030\uffff\034\uffff\040\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\052\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\001\002\000\010\006" +
    "\014\010\011\011\010\001\002\000\006\004\ufffd\005\ufffd" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\020\002\005\003\011\004\006\005\012\006" +
    "\003\007\004\010\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\223\015\027\016\031\017\017\020\020" +
    "\001\001\000\056\023\057\024\114\025\062\026\116\027" +
    "\065\030\103\032\072\033\066\034\111\035\063\036\073" +
    "\037\055\041\074\042\101\043\120\044\115\045\112\046" +
    "\110\047\107\050\106\051\105\052\104\001\001\000\002" +
    "\001\001\000\014\014\025\015\027\016\031\017\017\020" +
    "\020\001\001\000\002\001\001\000\014\014\050\015\027" +
    "\016\031\017\017\020\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\037\015\027" +
    "\016\031\017\017\020\020\001\001\000\002\001\001\000" +
    "\020\014\041\015\027\016\031\017\017\020\020\021\043" +
    "\022\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\041\015\027\016\031\017\017" +
    "\020\020\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\043\213\044\115\045\112\046\110" +
    "\047\107\050\106\051\105\052\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\043\211\044\115\045\112" +
    "\046\110\047\107\050\106\051\105\052\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\043\210\044\115\045" +
    "\112\046\110\047\107\050\106\051\105\052\104\001\001" +
    "\000\010\050\207\051\105\052\104\001\001\000\022\043" +
    "\200\044\115\045\112\046\110\047\107\050\106\051\105" +
    "\052\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\051\177\052\104\001\001\000\002" +
    "\001\001\000\022\043\176\044\115\045\112\046\110\047" +
    "\107\050\106\051\105\052\104\001\001\000\012\047\175" +
    "\050\106\051\105\052\104\001\001\000\002\001\001\000" +
    "\022\043\174\044\115\045\112\046\110\047\107\050\106" +
    "\051\105\052\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\164\001\001\000\004" +
    "\054\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\141\001\001\000\002\001\001\000\022\043" +
    "\130\044\115\045\112\046\110\047\107\050\106\051\105" +
    "\052\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\123\003\011\004\006\005\012\006\003\007\004" +
    "\010\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\043\127\044\115\045\112\046\110" +
    "\047\107\050\106\051\105\052\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\023\132\024\114\025\062" +
    "\026\116\027\065\030\103\031\133\032\072\033\066\034" +
    "\111\035\063\036\073\037\055\041\074\042\101\043\120" +
    "\044\115\045\112\046\110\047\107\050\106\051\105\052" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\024\136\025\062\026\116\027\065\030" +
    "\103\032\072\033\066\034\111\035\063\036\073\037\055" +
    "\041\074\042\101\043\120\044\115\045\112\046\110\047" +
    "\107\050\106\051\105\052\104\001\001\000\002\001\001" +
    "\000\022\043\156\044\115\045\112\046\110\047\107\050" +
    "\106\051\105\052\104\001\001\000\002\001\001\000\016" +
    "\045\145\046\110\047\107\050\106\051\105\052\104\001" +
    "\001\000\020\044\144\045\112\046\110\047\107\050\106" +
    "\051\105\052\104\001\001\000\002\001\001\000\004\056" +
    "\141\001\001\000\004\055\147\001\001\000\002\001\001" +
    "\000\014\046\155\047\107\050\106\051\105\052\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\047\163\050\106\051\105\052\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\043\170\044\115\045\112\046" +
    "\110\047\107\050\106\051\105\052\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\023\132\024" +
    "\114\025\062\026\116\027\065\030\103\031\202\032\072" +
    "\033\066\034\111\035\063\036\073\037\055\041\074\042" +
    "\101\043\120\044\115\045\112\046\110\047\107\050\106" +
    "\051\105\052\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\023\132\024\114\025\062\026\116\027\065" +
    "\030\103\031\205\032\072\033\066\034\111\035\063\036" +
    "\073\037\055\041\074\042\101\043\120\044\115\045\112" +
    "\046\110\047\107\050\106\051\105\052\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\040\217\043\216" +
    "\044\115\045\112\046\110\047\107\050\106\051\105\052" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\043\222\044\115\045\112\046\110\047\107\050\106\051" +
    "\105\052\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\227\001" +
    "\001\000\020\012\231\013\233\014\232\015\027\016\031" +
    "\017\017\020\020\001\001\000\004\042\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\241\014\232\015\027\016\031\017\017" +
    "\020\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\244\006\003\007\004\010\014" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoAscTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoAscTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoAscTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoAscTiny$actions {
  private final AnalizadorSintacticoAscTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoAscTiny$actions(AnalizadorSintacticoAscTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAscTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoAscTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAscTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAscTiny$stack,
    int                        CUP$AnalizadorSintacticoAscTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoAscTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoAscTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= LDECS LINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAscTiny$stack.elementAt(CUP$AnalizadorSintacticoAscTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoAscTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LDECS ::= DECS sep_di 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LDECS",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDECS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LDECS",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECS ::= DECS scol DEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DECS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECS ::= DEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DECS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= DEC_VAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= DEC_TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC ::= DEC_PROC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEC_VAR ::= var TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DEC_VAR",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_TIPO ::= type TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DEC_TIPO",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_PROC ::= proc id PARAMS BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("DEC_PROC",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= pap LPARAMS pcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LPARAMS ::= LPARAMS coma PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LPARAMS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LPARAMS ::= PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LPARAMS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LPARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LPARAMS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAM ::= TIPO amp id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("PARAM",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAM ::= TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("PARAM",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= TIPO_BASICO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= TIPO_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= TIPO_REG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= TIPO_PUNT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_BASICO ::= r_real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_BASICO ::= r_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_BASICO ::= r_bool 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_BASICO ::= r_string 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_ARRAY ::= array cap ent ccierre of TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_REG ::= record llap CAMPOS llcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_REG",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_PUNT ::= pointer TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNT",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CAMPOS ::= CAMPOS scol CAMPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CAMPOS ::= CAMPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CAMPO ::= TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("CAMPO",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINST ::= LINST scol INST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LINST",17, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINST ::= INST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("LINST",17, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= INST_ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= INST_IF_THEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= INST_IF_THEN_ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= INST_WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= INST_READ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= INST_WRITE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= INST_NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= INST_NEW 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= INST_DELETE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= INST_CALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= INST_COMPUESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST_ASIG ::= E0 igual E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST_IF_THEN ::= r_if E0 then AUX_LINST endif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_IF_THEN",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST_IF_THEN_ELSE ::= r_if E0 then AUX_LINST r_else AUX_LINST endif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_IF_THEN_ELSE",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST_WHILE ::= r_while E0 r_do AUX_LINST endwhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",22, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AUX_LINST ::= LINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("AUX_LINST",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AUX_LINST ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("AUX_LINST",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_READ ::= read E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_READ",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INST_WRITE ::= write E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_WRITE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST_NL ::= nl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_NL",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST_NEW ::= r_new E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_NEW",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INST_DELETE ::= delete E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_DELETE",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_CALL ::= call id pap REAL_PARAMS pcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // REAL_PARAMS ::= REAL_PARAMS coma E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("REAL_PARAMS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REAL_PARAMS ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("REAL_PARAMS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REAL_PARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("REAL_PARAMS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_COMPUESTA ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("INST_COMPUESTA",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= llap PROGRAMA llcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= llap llcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E0 ::= E1 mas E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E0 ::= E1 menos E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E1 ::= E1 OP1AI E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E2 ::= E2 OP2AI E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E4 OP3NA E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= menos E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E4 ::= not E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= E5 OP5A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= por E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= ent 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= r_true 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= r_false 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E7 ::= r_null 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E7 ::= pap E0 pcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("E7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP5A ::= cap E0 ccierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP5A",41, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP5A ::= punto id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP5A",41, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP5A ::= flecha id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP5A",41, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP3NA ::= por 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP3NA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP3NA ::= div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP3NA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP3NA ::= mod 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP3NA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP2AI ::= bne 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",43, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP2AI ::= beq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",43, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP2AI ::= ble 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",43, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP2AI ::= bge 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",43, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP2AI ::= blt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",43, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP2AI ::= bgt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",43, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP1AI ::= and 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP1AI",44, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP1AI ::= or 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAscTiny$result = parser.getSymbolFactory().newSymbol("OP1AI",44, RESULT);
            }
          return CUP$AnalizadorSintacticoAscTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoAscTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAscTiny$do_action(
    int                        CUP$AnalizadorSintacticoAscTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAscTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAscTiny$stack,
    int                        CUP$AnalizadorSintacticoAscTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoAscTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoAscTiny$act_num,
                               CUP$AnalizadorSintacticoAscTiny$parser,
                               CUP$AnalizadorSintacticoAscTiny$stack,
                               CUP$AnalizadorSintacticoAscTiny$top);
    }
}

