grammar calc
{
    analysis    LL1;
    nonterminal PROGRAMA,LDECS,RDECS,DECS,DEC,DEC_VAR,DEC_TIPO ,DEC_PROC ,PARAMS,LPARAMS,RLPARAMS,PARAM,TIPO,TIPO_BASICO,TIPO_ARRAY,TIPO_REG,TIPO_PUNT,CAMPOS,RCAMPOS,CAMPO,LINST,RLINST,INST,INST_ASIG,E0,E1,E2,E3,E4,E5,E6,E7,OP1AI,OP2AI,OP3NA,OP5A1,OP5A2,RES0,RES1,RES2,RES3,RES5,INST_IF,RES_IF,INST_WHILE,AUX_LINST,INST_READ,INST_WRITE,INST_NL,INST_NEW,INST_DELETE,INST_CALL,REAL_PARAMS,RES_PARAMS,INST_COMPUESTA,BLOQUE;
    terminal sep_di,scol,id,var,type,proc,r_real,r_int,r_bool,igual,mas,menos,por,div,and,or,not,ent,real,pap,pcierre,bne,beq,ble,bge,bgt,blt,coma,amp,r_string,array,cap,ccierre,of,record,llap,llcierre,pointer,if,then,endif,else,while,do,endwhile,read,write,nl,new,delete,call,cadena,null,mod,true,false,punto,flecha;

    PROGRAMA :=  LDECS LINST;
    LDECS :=  DECS sep_di;
    LDECS := ;
    DECS := DEC RDECS;
    RDECS := scol DEC RDECS;
    RDECS :=;
    DEC := DEC_VAR | DEC_TIPO | DEC_PROC;
    DEC_VAR := var TIPO id;
    DEC_TIPO := type TIPO id;
    DEC_PROC := proc id PARAMS BLOQUE;
    PARAMS := pap LPARAMS pcierre;
    LPARAMS:=;
    LPARAMS:=PARAM RLPARAMS;
    RLPARAMS:= coma PARAM RLPARAMS;
    RLPARAMS:=;
    PARAM := TIPO amp id;
    TIPO := TIPO_BASICO |  TIPO_ARRAY | TIPO_REG | TIPO_PUNT | id;
    TIPO_BASICO :=  r_real | r_int | r_bool | r_string ;
    TIPO_ARRAY := array cap ent ccierre of TIPO;
    TIPO_REG := record llap CAMPOS llcierre; 
    TIPO_PUNT := pointer TIPO;
    CAMPOS:= CAMPO RCAMPOS;
    RCAMPOS:= scol CAMPO RCAMPOS;
    RCAMPOS:=;
    CAMPO := TIPO id;
    LINST := INST RLINST;
    RLINST := scol INST RLINST;
    RLINST :=;
   INST := INST_ASIG | INST_IF | INST_WHILE | INST_READ |        INST_WRITE | INST_NL | INST_NEW | INST_DELETE | INST_CALL | INST_COMPUESTA;
    INST_ASIG := E0 igual E0;
    INST_IF := if E0 then AUX_LINST RES_IF endif;
    RES_IF :=;
    RES_IF := else AUX_LINST;
    INST_WHILE := while E0 do AUX_LINST endwhile;
    AUX_LINST := LINST;
    AUX_LINST :=;
    INST_READ := read E0;
    INST_WRITE := write E0;
    INST_NL := nl;
    INST_NEW  := new E0;
    INST_DELETE  := delete E0;
    INST_CALL := call id pap REAL_PARAMS pcierre;
    REAL_PARAMS :=;
    REAL_PARAMS := E0 RES_PARAMS;
    RES_PARAMS := coma E0 RES_PARAMS;
    RES_PARAMS :=;
    INST_COMPUESTA := BLOQUE;
    BLOQUE := llap PROGRAMA llcierre;
 
E0 := E1 RES0;
RES0 := mas E0;
RES0:= menos E1;
RES0 :=;
E1 := E2 RES1;
RES1 := OP1AI E2 RES1;
RES1 :=;
E2 := E3 RES2;
RES2 := OP2AI E3 RES2;
RES2:=;
E3 := E4 RES3;
RES3 := OP3NA E4;
RES3:=;
E4 := menos E5;
E4 := not E4;
E4 := E5;
E5 := E6 RES5;
RES5 := OP5A1 E6 RES5;
RES5 := OP5A2 E6 ccierre RES5;
RES5 :=;
E6 := por E6;
E6 := E7;
E7 := ent | real | cadena | true | false | id | null |  pap E0 pcierre;    
   
OP5A1 := punto id | flecha id;
OP5A2 := cap;
OP3NA := por | div | mod;
OP2AI := bne | beq | ble | bge | blt | bgt;
OP1AI := and | or;

    
}