options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST)
package c_ast_descendente;

import asint.TinyASint.Dec;
import asint.TinyASint.Exp;
import asint.TinyASint.Inst;
import asint.TinyASint.LDecs;
import asint.TinyASint.LInst;
import asint.TinyASint.Prog;
import asint.TinyASint.StringLocalizado;
import asint.TinyASint.Tipo;
import asint.TinyASint.LParams;
import asint.TinyASint.Bloque;
import asint.TinyASint.Param;
import asint.TinyASint.LCampos;
import asint.TinyASint.Campo;
import asint.TinyASint.LInst_aux;
import asint.TinyASint.LReal_params;
import semops.SemOps;


public class ConstructorAST {
   private SemOps sem = new SemOps();
}

PARSER_END(ConstructorAST)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:(<digitoPositivo> (<digito>)*) |"0">}
  TOKEN:{<#parteDecimal: "." ("0" | ((<digito>)* <digitoPositivo>))>}
  TOKEN:{<#parteExp: ["E","e"] (["+","-"])? <parteEntera>>}
  TOKEN:{<#AllowedCharacters: ~["\"","\r","\b","\n"]>}
  
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  

  TOKEN: {<var:"var">}
  TOKEN: {<type:"type">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<r_int:"int">}
  TOKEN: {<r_real:"real">}
  TOKEN: {<r_bool:"bool">}
  TOKEN: {<r_string:"string">}
  TOKEN: {<array:"array">}
  TOKEN: {<of:"of">}
  TOKEN: {<record:"record">}
  TOKEN: {<pointer:"pointer">}
  TOKEN: {<r_if: "if">}
  TOKEN: {<then:"then">}
  TOKEN: {<endif:"endif">}
  TOKEN: {<r_else:"else">}
  TOKEN: {<r_while:"while">}
  TOKEN: {<r_do:"do">}
  TOKEN: {<endwhile:"endwhile">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<r_new:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<call:"call">}
  TOKEN: {<not:"not">}
  TOKEN: {<r_true:"true">}
  TOKEN: {<r_false:"false">}
  TOKEN: {<r_null:"null">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<punto:".">}
  TOKEN: {<flecha:"->">}

  TOKEN:{<identificador: <letra>(<letra>|<digito> |"_")*>}
  TOKEN:{<numeroEntero: (["+","-"])? <parteEntera> >}
  TOKEN:{<numeroReal: <numeroEntero> (<parteDecimal><parteExp> | <parteDecimal> | <parteExp>)>}
  TOKEN:{<str: "\""(<AllowedCharacters>)* "\"">}

  

  Prog Init()       : {Prog prog;}
                      {prog = PROGRAMA() <EOF> 
                      {return prog;}}
  Prog PROGRAMA()   : {LDecs ldecs; LInst linst;}
                      {ldecs = LDECS() "&&" linst = LINST() {return sem.programa(ldecs,linst);}
                      | linst = LINST() {return sem.programa(null,linst);}} 
  LDecs LDECS()     : {Dec dec; LDecs decs,result; }
                      {dec = DEC() result = RDECS(sem.decs_una(dec))
                      {return result;}}
  LDecs RDECS(LDecs res_h)    : {Dec dec; LDecs rdecs;}
                    {";" dec = DEC() rdecs = RDECS(sem.decs_muchas(res_h,dec))
                     {return rdecs;}
                     | {return res_h;} }
  Dec DEC()      : {Token id;Tipo tipo;Dec res;}
                   {<var> tipo = TIPO() id = <identificador> {return sem.dec_var(tipo,sem.str(id.image,id.beginLine,id.beginColumn));} |
                    <type> tipo = TIPO() id = <identificador> {return sem.dec_type(tipo,sem.str(id.image,id.beginLine,id.beginColumn));} |
                    <proc> id = <identificador> "(" res = RES_DEC(sem.str(id.image,id.beginLine,id.beginColumn)) {return res;}}

  Dec RES_DEC(StringLocalizado id_h) : {LParams lparams; Bloque bloque;}
                         {lparams = LPARAMS() ")" bloque = BLOQUE() {return sem.dec_proc_con_params(id_h,lparams,bloque);} 
                         |  ")" bloque = BLOQUE() {return sem.dec_proc_sin_params(id_h,bloque);}}

  LParams LPARAMS()  : {Param param; LParams rlparams;}
                     {param = PARAM() rlparams = RLPARAMS(sem.l_params_uno(param))
                     {return rlparams;}}

  LParams RLPARAMS(LParams param_h) : {Param param; LParams rlparams;}
                                 {"," param = PARAM() {return RLPARAMS(sem.l_params_muchos(param_h,param));}
                                  | {return param_h;}}
  Param PARAM()    : {Tipo tipo;}
                    {tipo = TIPO() {return RPARAM(tipo);}}
      
  Param RPARAM(Tipo tipo_h)   : {Token id;}
                                 {id = <identificador> {return sem.param_sin_amp(tipo_h,sem.str(id.image,id.beginLine,id.beginColumn));}
                                  |
                                 "&" id = <identificador> {return sem.param_con_amp(tipo_h,sem.str(id.image,id.beginLine,id.beginColumn));}}


  Tipo TIPO() : {Token id,num; Tipo tipo; LCampos lcampos;} 
                  { 
                      <r_int> {return sem.tipo_Entero();} 
                    | <r_real> {return sem.tipo_Real();} 
                    | <r_bool> {return sem.tipo_Bool();}
                    | <r_string> {return sem.tipo_String();}
                    | id = <identificador> {return sem.tipo_Id(sem.str(id.image,id.beginLine,id.beginColumn));}
                    | <array> "[" num = <numeroEntero> "]" <of> tipo = TIPO() {return sem.tipo_Array(sem.str(num.image,num.beginLine,num.beginColumn),tipo);}
                    | <record> "{" lcampos = CAMPOS() "}" {return sem.tipo_Reg(lcampos);}
                    | <pointer> tipo = TIPO() {return sem.tipo_Puntero(tipo);} 
                  }

  
  LCampos CAMPOS()  : {Campo campo; LCampos rcampos;}
                     { campo = CAMPO() rcampos = RCAMPOS(sem.l_campos_uno(campo)) {return rcampos;}}

  LCampos RCAMPOS(LCampos res_h)  : {Campo campo; LCampos rcampos;}
                                   {";" campo = CAMPO() rcampos = RCAMPOS(sem.l_campos_muchos(res_h,campo)){return rcampos;}
                                  | {return res_h;}}

  Campo CAMPO()  : {Tipo tipo; Token id;}
                  { tipo = TIPO() id = <identificador> {return sem.campo(tipo,sem.str(id.image,id.beginLine,id.beginColumn));}}

  LInst LINST()  : {Inst inst; LInst rlinst;} 
              {inst = INST() rlinst = RLINST(sem.l_inst_una(inst)) 
              {return rlinst;}}
  LInst RLINST(LInst res_h)  : {Inst inst; LInst rlinst;} 
                    {";" inst = INST() rlinst = RLINST(sem.l_inst_muchas(res_h,inst)){return rlinst;}
                    | {return res_h;} }

  Inst INST():{Exp exp1,exp2; LInst_aux linst_aux; Inst res_if,res_call; Token id; Bloque bloque;} 
               {
                 exp1 = E0() "=" exp2 = E0(){return sem.inst_asig(exp1,exp2);}
                |<r_if> exp1 = E0() <then> linst_aux = AUX_LINST() res_if = RES_IF(exp1,linst_aux){return res_if;}
                |<r_while>  exp1 = E0() <r_do> linst_aux = AUX_LINST() <endwhile> {return sem.inst_while(exp1,linst_aux);}
                |<read> exp1 = E0() {return sem.inst_read(exp1);}
                |<write> exp1 = E0() {return sem.inst_write(exp1);}
                |<nl> {return sem.inst_nl();}
                |<r_new> exp1 = E0() {return sem.inst_new(exp1);}
                |<delete> exp1 = E0() {return sem.inst_delete(exp1);}
                |<call> id = <identificador> "(" res_call = RES_CALL(sem.str(id.image,id.beginLine,id.beginColumn))  {return res_call;}
                | bloque = BLOQUE() {return sem.inst_compuesta(bloque);}              
               }          
  Inst RES_CALL(StringLocalizado id_h):{LReal_params r_params;}
                        {
                          ")" {return sem.inst_call_sin_params(id_h);}
                         | r_params = REAL_PARAMS() ")" {return sem.inst_call_con_params(id_h,r_params);}}

  LInst_aux AUX_LINST()  : {LInst linst;}
                      {linst = LINST() {return sem.linst_aux(linst);}
                      | {return sem.linst_aux_vacia();} }
            
  Inst RES_IF(Exp exp_h, LInst_aux linst_aux_h)  : {LInst_aux linst_aux;}
                  { <r_else> linst_aux = AUX_LINST() <endif> {return sem.inst_if_then_else(exp_h,linst_aux_h,linst_aux);}
                  | <endif> {return sem.inst_if_then(exp_h,linst_aux_h);} }

  LReal_params REAL_PARAMS()  : {Exp exp; LReal_params res_params;} 
                      {exp = E0() res_params = RES_PARAMS(sem.l_real_params_uno(exp)) {return res_params;} }
  
  LReal_params RES_PARAMS(LReal_params params_h)  : {Exp exp; LReal_params res_params;} 
                              {"," exp = E0() res_params = RES_PARAMS(sem.l_real_params_muchos(params_h,exp)) {return res_params;}
                               | {return params_h;} }
 
  Bloque BLOQUE()  : {Bloque b;} { "{" b = RBLOQUE() {return b;}}
  Bloque RBLOQUE()  : {Prog prog;}
                      { "}" {return sem.bloque_vacio();} 
                        | prog = PROGRAMA() "}" {return sem.bloque(prog);}}

  Exp E0()  : {Exp e,res;} { e = E1() res = RES0(e) {return res;}}
  Exp RES0(Exp exp_h)  : {Exp e;}
                        { "+" e = E0() {return sem.exp("+",exp_h,e);}
                          | "-" e = E1() {return sem.exp("-",exp_h,e);}
                          | {return exp_h;} }
  Exp E1()  : {Exp e,res;} { e = E2() res = RES1(e) {return res;}}
  Exp RES1(Exp exp_h)  : {String op; Exp e,res;} 
                          {op = OP1AI() e = E2() res = RES1(sem.exp(op,exp_h,e)) {return res;}
                           | {return exp_h;}}
  Exp E2()  : {Exp e,res;} { e = E3() res = RES2(e) {return res;}}
  Exp RES2(Exp exp_h)  : {String op; Exp e,res;}
             {op = OP2AI()  e = E3() res = RES2(sem.exp(op,exp_h,e)) {return res;} 
             | {return exp_h;} }
  Exp E3()  : {Exp e,res;} { e = E4() res = RES3(e) {return res;}}
  Exp RES3(Exp exp_h)  : {String op; Exp e,res;}
                         {op = OP3NA()  e =E4() {return sem.exp(op,exp_h,e);}
                          |{return exp_h;} }
  Exp E4()  : {Exp e;} {"-" e = E5() {return sem.menos_unario(e);}
                       | <not> e = E4() {return sem.c_not(e);}
                       | e = E5() {return e;}}
  Exp E5()  : {Exp e,res;} { e = E6() res = RES_RES5(e) {return res;}}
  Exp RES_RES5(Exp exp_h)  : {Exp e,res;}
                      { e = RES5(exp_h) res = RES_RES5(e) {return res;}  
                      | {return exp_h;}}

  Exp RES5(Exp exp_h)  : {String op; Exp e; Token id;}
                         {
                           "[" e = E0() "]"   {return sem.index(e);}
                           |<punto> id = <identificador> {return sem.punto(exp_h,sem.str(id.image,id.beginLine,id.beginColumn));}
                           |<flecha> id = <identificador> {return sem.flecha(exp_h,sem.str(id.image,id.beginLine,id.beginColumn));}
                          }
  Exp E6()  : {Exp e;} {"*" e = E6() {return sem.indireccion(e);}
                       | e = E7() {return e;} }
  Exp E7()  : {Token t; Exp e;} 
          { t = <numeroEntero> {return sem.numEnt(sem.str(t.image,t.beginLine,t.beginColumn));}
          | t = <numeroReal> {return sem.numReal(sem.str(t.image,t.beginLine,t.beginColumn));}
          | t = <str>  {return sem.c_str(sem.str(t.image,t.beginLine,t.beginColumn));}
          | <r_true> {return sem.c_true();}
          | <r_false> {return sem.c_false();}
          | t = <identificador> {return sem.identificador(sem.str(t.image,t.beginLine,t.beginColumn));}
          | <r_null> {return sem.c_null();} 
          | "(" e = E0() ")" {return e;}
          }

 
  String OP1AI()  : {} {<and> {return "and";} | <or> {return "or";}}
  String OP2AI()  : {} {"!=" {return "!=";} | "==" {return "==";} | "<" {return "<";} 
                      | ">" {return ">";} | "<=" {return "<=";} | ">=" {return ">=";}}
  String OP3NA()  : {} {"*" {return "*";} | "/" {return "/";} | "%" {return "%";}}
  






  
   


