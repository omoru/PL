
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 21 15:45:52 CEST 2021
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Prog;
import asint.TinyASint.LDecs;
import asint.TinyASint.Dec;
import asint.TinyASint.LParams;
import asint.TinyASint.Param;
import asint.TinyASint.Tipo;
import asint.TinyASint.LCampos;
import asint.TinyASint.Campo;
import asint.TinyASint.LInst;
import asint.TinyASint.Inst;
import asint.TinyASint.LInst_aux;
import asint.TinyASint.LReal_params;
import asint.TinyASint.Bloque;
import asint.TinyASint.Exp;
import asint.TinyASint.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 21 15:45:52 CEST 2021
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\010\000\002\004\007\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\010\000\002\007\006" +
    "\000\002\007\004\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\004\000\002\012\005\000\002" +
    "\012\003\000\002\013\005\000\002\013\007\000\002\013" +
    "\011\000\002\013\007\000\002\014\003\000\002\014\002" +
    "\000\002\013\004\000\002\013\004\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\007\000\002" +
    "\013\006\000\002\013\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\004\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\004\000\002\023" +
    "\004\000\002\023\003\000\002\024\006\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\004\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\060\006\022\007\050\010\023\011\014\026" +
    "\047\032\021\036\045\041\017\042\011\043\043\044\031" +
    "\045\026\046\005\050\020\051\027\052\004\053\010\054" +
    "\006\055\024\072\015\073\046\074\025\075\013\001\002" +
    "\000\072\002\uffbf\005\uffbf\012\uffbf\013\uffbf\022\uffbf\023" +
    "\uffbf\027\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf" +
    "\040\uffbf\047\uffbf\050\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\001\002\000\004\074\216\001" +
    "\002\000\072\002\uffc2\005\uffc2\012\uffc2\013\uffc2\022\uffc2" +
    "\023\uffc2\027\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\037" +
    "\uffc2\040\uffc2\047\uffc2\050\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\004\002\215" +
    "\001\002\000\072\002\uffc0\005\uffc0\012\uffc0\013\uffc0\022" +
    "\uffc0\023\uffc0\027\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\037\uffc0\040\uffc0\047\uffc0\050\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002\000\030\011" +
    "\014\050\020\051\027\052\004\053\010\054\006\055\024" +
    "\072\015\073\046\074\025\075\013\001\002\000\010\002" +
    "\uffff\005\110\027\uffff\001\002\000\072\002\uffbc\005\uffbc" +
    "\012\uffbc\013\uffbc\022\uffbc\023\uffbc\027\uffbc\031\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\047\uffbc\050\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\001\002\000\030\011\014\050\020\051\027\052\004\053" +
    "\010\054\006\055\024\072\015\073\046\074\025\075\013" +
    "\001\002\000\072\002\uffbd\005\uffbd\012\uffbd\013\uffbd\022" +
    "\uffbd\023\uffbd\027\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\047\uffbd\050\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\001\002\000\006\004" +
    "\206\005\207\001\002\000\030\011\014\050\020\051\027" +
    "\052\004\053\010\054\006\055\024\072\015\073\046\074" +
    "\025\075\013\001\002\000\024\011\014\052\004\053\010" +
    "\054\006\055\024\072\015\073\046\074\025\075\013\001" +
    "\002\000\030\011\014\050\020\051\027\052\004\053\010" +
    "\054\006\055\024\072\015\073\046\074\025\075\013\001" +
    "\002\000\022\015\053\016\060\017\061\020\056\021\055" +
    "\025\054\030\051\074\052\001\002\000\004\074\155\001" +
    "\002\000\024\011\014\052\004\053\010\054\006\055\024" +
    "\072\015\073\046\074\025\075\013\001\002\000\072\002" +
    "\uffc1\005\uffc1\012\uffc1\013\uffc1\022\uffc1\023\uffc1\027\uffc1" +
    "\031\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\047" +
    "\uffc1\050\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\001\002\000\030\011\014\050\020\051\027" +
    "\052\004\053\010\054\006\055\024\072\015\073\046\074" +
    "\025\075\013\001\002\000\030\011\014\050\020\051\027" +
    "\052\004\053\010\054\006\055\024\072\015\073\046\074" +
    "\025\075\013\001\002\000\016\002\uffda\005\uffda\027\uffda" +
    "\034\uffda\035\uffda\040\uffda\001\002\000\030\011\014\050" +
    "\020\051\027\052\004\053\010\054\006\055\024\072\015" +
    "\073\046\074\025\075\013\001\002\000\006\004\ufffd\005" +
    "\ufffd\001\002\000\072\002\uffc4\005\uffc4\012\uffc4\013\uffc4" +
    "\022\uffc4\023\uffc4\027\uffc4\031\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\047\uffc4\050\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\072" +
    "\002\uffc6\005\uffc6\012\uffc6\013\uffc6\022\uffc6\023\uffc6\027" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6" +
    "\047\uffc6\050\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\001\002\000\072\002\uffca\005\uffca\012" +
    "\uffca\013\uffca\022\144\023\uffca\027\uffca\031\uffca\033\uffca" +
    "\034\uffca\035\uffca\037\uffca\040\uffca\047\uffca\050\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\142\071\143\001" +
    "\002\000\064\002\uffcd\005\uffcd\012\uffcd\013\uffcd\023\uffcd" +
    "\027\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040" +
    "\uffcd\047\uffcd\050\uffcd\055\135\056\140\057\136\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\001\002\000\056\002\uffcf\005\uffcf\012\uffcf\013\uffcf" +
    "\023\uffcf\027\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\037" +
    "\uffcf\040\uffcf\047\uffcf\050\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000" +
    "\056\002\uffd1\005\uffd1\012\uffd1\013\uffd1\023\uffd1\027\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\047" +
    "\uffd1\050\uffd1\060\124\061\127\062\131\063\132\064\130" +
    "\065\126\066\uffd1\067\uffd1\001\002\000\016\002\uffe8\005" +
    "\uffe8\027\uffe8\034\uffe8\035\uffe8\040\uffe8\001\002\000\042" +
    "\002\uffd3\005\uffd3\012\uffd3\013\uffd3\023\uffd3\027\uffd3\031" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\047\115" +
    "\050\117\066\120\067\121\001\002\000\016\002\uffdf\005" +
    "\uffdf\027\uffdf\034\uffdf\035\uffdf\040\uffdf\001\002\000\004" +
    "\031\113\001\002\000\030\011\014\050\020\051\027\052" +
    "\004\053\010\054\006\055\024\072\015\073\046\074\025" +
    "\075\013\001\002\000\072\002\uffbe\005\uffbe\012\uffbe\013" +
    "\uffbe\022\uffbe\023\uffbe\027\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\037\uffbe\040\uffbe\047\uffbe\050\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000" +
    "\062\006\022\007\050\010\023\011\014\026\047\027\101" +
    "\032\021\036\045\041\017\042\011\043\043\044\031\045" +
    "\026\046\005\050\020\051\027\052\004\053\010\054\006" +
    "\055\024\072\015\073\046\074\025\075\013\001\002\000" +
    "\022\015\053\016\060\017\061\020\056\021\055\025\054" +
    "\030\051\074\052\001\002\000\022\015\053\016\060\017" +
    "\061\020\056\021\055\025\054\030\051\074\052\001\002" +
    "\000\006\014\uffed\074\uffed\001\002\000\006\014\ufff3\074" +
    "\ufff3\001\002\000\004\026\070\001\002\000\004\022\063" +
    "\001\002\000\006\014\ufff1\074\ufff1\001\002\000\004\074" +
    "\062\001\002\000\006\014\ufff2\074\ufff2\001\002\000\006" +
    "\014\ufff4\074\ufff4\001\002\000\006\004\ufffb\005\ufffb\001" +
    "\002\000\004\075\064\001\002\000\004\023\065\001\002" +
    "\000\004\024\066\001\002\000\022\015\053\016\060\017" +
    "\061\020\056\021\055\025\054\030\051\074\052\001\002" +
    "\000\006\014\ufff0\074\ufff0\001\002\000\022\015\053\016" +
    "\060\017\061\020\056\021\055\025\054\030\051\074\052" +
    "\001\002\000\004\074\077\001\002\000\006\005\uffeb\027" +
    "\uffeb\001\002\000\006\005\074\027\075\001\002\000\022" +
    "\015\053\016\060\017\061\020\056\021\055\025\054\030" +
    "\051\074\052\001\002\000\006\014\uffef\074\uffef\001\002" +
    "\000\006\005\uffec\027\uffec\001\002\000\006\005\uffea\027" +
    "\uffea\001\002\000\006\014\uffee\074\uffee\001\002\000\020" +
    "\002\uffd6\004\uffd6\005\uffd6\027\uffd6\034\uffd6\035\uffd6\040" +
    "\uffd6\001\002\000\004\027\103\001\002\000\020\002\uffd7" +
    "\004\uffd7\005\uffd7\027\uffd7\034\uffd7\035\uffd7\040\uffd7\001" +
    "\002\000\004\037\105\001\002\000\054\011\014\026\047" +
    "\032\021\036\045\040\uffe2\041\017\042\011\043\043\044" +
    "\031\045\026\046\005\050\020\051\027\052\004\053\010" +
    "\054\006\055\024\072\015\073\046\074\025\075\013\001" +
    "\002\000\004\040\112\001\002\000\012\005\110\034\uffe3" +
    "\035\uffe3\040\uffe3\001\002\000\052\011\014\026\047\032" +
    "\021\036\045\041\017\042\011\043\043\044\031\045\026" +
    "\046\005\050\020\051\027\052\004\053\010\054\006\055" +
    "\024\072\015\073\046\074\025\075\013\001\002\000\016" +
    "\002\uffe9\005\uffe9\027\uffe9\034\uffe9\035\uffe9\040\uffe9\001" +
    "\002\000\016\002\uffe4\005\uffe4\027\uffe4\034\uffe4\035\uffe4" +
    "\040\uffe4\001\002\000\030\011\014\050\020\051\027\052" +
    "\004\053\010\054\006\055\024\072\015\073\046\074\025" +
    "\075\013\001\002\000\016\002\uffe7\005\uffe7\027\uffe7\034" +
    "\uffe7\035\uffe7\040\uffe7\001\002\000\030\011\014\050\020" +
    "\051\027\052\004\053\010\054\006\055\024\072\015\073" +
    "\046\074\025\075\013\001\002\000\030\011\014\050\020" +
    "\051\027\052\004\053\010\054\006\055\024\072\015\073" +
    "\046\074\025\075\013\001\002\000\030\011\014\050\020" +
    "\051\027\052\004\053\010\054\006\055\024\072\015\073" +
    "\046\074\025\075\013\001\002\000\030\011\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\001\002\000\030\011\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\001\002\000\036\002\uffd4\005\uffd4" +
    "\012\uffd4\013\uffd4\023\uffd4\027\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\037\uffd4\040\uffd4\066\120\067\121\001\002" +
    "\000\056\002\uffd2\005\uffd2\012\uffd2\013\uffd2\023\uffd2\027" +
    "\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2" +
    "\047\uffd2\050\uffd2\060\124\061\127\062\131\063\132\064" +
    "\130\065\126\066\uffd2\067\uffd2\001\002\000\030\011\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000\030\011\014" +
    "\050\020\051\027\052\004\053\010\054\006\055\024\072" +
    "\015\073\046\074\025\075\013\001\002\000\030\011\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000\030\011\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000\030\011\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\072" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000\030\011\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\072" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002\000\030\011\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\056\002\uffd0" +
    "\005\uffd0\012\uffd0\013\uffd0\023\uffd0\027\uffd0\031\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\047\uffd0\050\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\001\002\000\032\002\uffd5\005\uffd5\012\uffd5" +
    "\013\uffd5\023\uffd5\027\uffd5\031\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\037\uffd5\040\uffd5\001\002\000\030\011\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\072\uffbb\073" +
    "\uffbb\074\uffbb\075\uffbb\001\002\000\030\011\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\001\002\000\030\011\014\050\020" +
    "\051\027\052\004\053\010\054\006\055\024\072\015\073" +
    "\046\074\025\075\013\001\002\000\030\011\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\072\uffba\073" +
    "\uffba\074\uffba\075\uffba\001\002\000\056\002\uffce\005\uffce" +
    "\012\uffce\013\uffce\023\uffce\027\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\037\uffce\040\uffce\047\uffce\050\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067" +
    "\uffce\001\002\000\004\074\150\001\002\000\004\074\147" +
    "\001\002\000\030\011\014\050\020\051\027\052\004\053" +
    "\010\054\006\055\024\072\015\073\046\074\025\075\013" +
    "\001\002\000\004\023\146\001\002\000\072\002\uffc9\005" +
    "\uffc9\012\uffc9\013\uffc9\022\uffc9\023\uffc9\027\uffc9\031\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\047\uffc9\050" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\001\002\000\072\002\uffc7\005\uffc7\012\uffc7\013\uffc7" +
    "\022\uffc7\023\uffc7\027\uffc7\031\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\040\uffc7\047\uffc7\050\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000\072" +
    "\002\uffc8\005\uffc8\012\uffc8\013\uffc8\022\uffc8\023\uffc8\027" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8" +
    "\047\uffc8\050\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\001\002\000\016\002\uffde\005\uffde\027" +
    "\uffde\034\uffde\035\uffde\040\uffde\001\002\000\064\002\uffcb" +
    "\005\uffcb\012\uffcb\013\uffcb\023\uffcb\027\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\047\uffcb\050\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\016" +
    "\002\uffdd\005\uffdd\027\uffdd\034\uffdd\035\uffdd\040\uffdd\001" +
    "\002\000\072\002\uffc5\005\uffc5\012\uffc5\013\uffc5\022\uffc5" +
    "\023\uffc5\027\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\047\uffc5\050\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000\004\011\156" +
    "\001\002\000\024\012\157\015\053\016\060\017\061\020" +
    "\056\021\055\025\054\030\051\074\052\001\002\000\004" +
    "\026\047\001\002\000\006\012\167\013\166\001\002\000" +
    "\006\014\163\074\164\001\002\000\006\012\ufff7\013\ufff7" +
    "\001\002\000\004\074\165\001\002\000\006\012\ufff5\013" +
    "\ufff5\001\002\000\006\012\ufff6\013\ufff6\001\002\000\022" +
    "\015\053\016\060\017\061\020\056\021\055\025\054\030" +
    "\051\074\052\001\002\000\004\026\047\001\002\000\006" +
    "\004\ufffa\005\ufffa\001\002\000\006\012\ufff8\013\ufff8\001" +
    "\002\000\006\004\ufff9\005\ufff9\001\002\000\004\074\174" +
    "\001\002\000\006\004\ufffc\005\ufffc\001\002\000\004\033" +
    "\176\001\002\000\056\011\014\026\047\032\021\034\uffe2" +
    "\035\uffe2\036\045\041\017\042\011\043\043\044\031\045" +
    "\026\046\005\050\020\051\027\052\004\053\010\054\006" +
    "\055\024\072\015\073\046\074\025\075\013\001\002\000" +
    "\006\034\201\035\200\001\002\000\016\002\uffe6\005\uffe6" +
    "\027\uffe6\034\uffe6\035\uffe6\040\uffe6\001\002\000\054\011" +
    "\014\026\047\032\021\035\uffe2\036\045\041\017\042\011" +
    "\043\043\044\031\045\026\046\005\050\020\051\027\052" +
    "\004\053\010\054\006\055\024\072\015\073\046\074\025" +
    "\075\013\001\002\000\004\035\203\001\002\000\016\002" +
    "\uffe5\005\uffe5\027\uffe5\034\uffe5\035\uffe5\040\uffe5\001\002" +
    "\000\072\002\uffcc\005\uffcc\012\uffcc\013\uffcc\022\144\023" +
    "\uffcc\027\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\047\uffcc\050\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\142\071\143\001\002\000\016\002\uffe1\005" +
    "\uffe1\027\uffe1\034\uffe1\035\uffe1\040\uffe1\001\002\000\052" +
    "\011\014\026\047\032\021\036\045\041\017\042\011\043" +
    "\043\044\031\045\026\046\005\050\020\051\027\052\004" +
    "\053\010\054\006\055\024\072\015\073\046\074\025\075" +
    "\013\001\002\000\010\006\022\007\050\010\023\001\002" +
    "\000\006\004\ufffe\005\ufffe\001\002\000\010\002\001\005" +
    "\110\027\001\001\002\000\004\012\213\001\002\000\072" +
    "\002\uffc3\005\uffc3\012\uffc3\013\uffc3\022\uffc3\023\uffc3\027" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3" +
    "\047\uffc3\050\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\001\002\000\016\002\uffe0\005\uffe0\027" +
    "\uffe0\034\uffe0\035\uffe0\040\uffe0\001\002\000\004\002\000" +
    "\001\002\000\004\011\217\001\002\000\032\011\014\012" +
    "\220\050\020\051\027\052\004\053\010\054\006\055\024" +
    "\072\015\073\046\074\025\075\013\001\002\000\016\002" +
    "\uffdb\005\uffdb\027\uffdb\034\uffdb\035\uffdb\040\uffdb\001\002" +
    "\000\006\012\uffd8\013\uffd8\001\002\000\006\012\224\013" +
    "\223\001\002\000\030\011\014\050\020\051\027\052\004" +
    "\053\010\054\006\055\024\072\015\073\046\074\025\075" +
    "\013\001\002\000\016\002\uffdc\005\uffdc\027\uffdc\034\uffdc" +
    "\035\uffdc\040\uffdc\001\002\000\006\012\uffd9\013\uffd9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\036\002\006\003\015\004\031\012\011\013" +
    "\040\016\027\017\043\020\041\021\037\022\036\023\035" +
    "\024\034\025\033\026\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\213\020\041\021\037\022\036\023" +
    "\035\024\034\025\033\026\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\211\020\041\021\037\022" +
    "\036\023\035\024\034\025\033\026\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\204\020\041\021" +
    "\037\022\036\023\035\024\034\025\033\026\032\001\001" +
    "\000\010\024\203\025\033\026\032\001\001\000\022\017" +
    "\174\020\041\021\037\022\036\023\035\024\034\025\033" +
    "\026\032\001\001\000\004\007\172\001\001\000\002\001" +
    "\001\000\006\025\153\026\032\001\001\000\002\001\001" +
    "\000\022\017\152\020\041\021\037\022\036\023\035\024" +
    "\034\025\033\026\032\001\001\000\012\023\151\024\034" +
    "\025\033\026\032\001\001\000\002\001\001\000\022\017" +
    "\150\020\041\021\037\022\036\023\035\024\034\025\033" +
    "\026\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\136\001\001" +
    "\000\002\001\001\000\004\030\124\001\001\000\002\001" +
    "\001\000\004\031\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\103\020\041\021\037\022\036\023" +
    "\035\024\034\025\033\026\032\001\001\000\002\001\001" +
    "\000\036\002\101\003\015\004\031\012\011\013\040\016" +
    "\027\017\043\020\041\021\037\022\036\023\035\024\034" +
    "\025\033\026\032\001\001\000\004\007\056\001\001\000" +
    "\004\007\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\066\001\001\000\002\001\001\000\010" +
    "\007\070\010\072\011\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\070\011\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\012\106\013" +
    "\040\014\105\016\027\017\043\020\041\021\037\022\036" +
    "\023\035\024\034\025\033\026\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\013\110\016\027\017\043" +
    "\020\041\021\037\022\036\023\035\024\034\025\033\026" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\017\113\020\041\021\037\022\036\023\035\024\034\025" +
    "\033\026\032\001\001\000\002\001\001\000\022\017\133" +
    "\020\041\021\037\022\036\023\035\024\034\025\033\026" +
    "\032\001\001\000\016\021\122\022\036\023\035\024\034" +
    "\025\033\026\032\001\001\000\020\020\121\021\037\022" +
    "\036\023\035\024\034\025\033\026\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\115\001\001\000" +
    "\004\030\124\001\001\000\002\001\001\000\014\022\132" +
    "\023\035\024\034\025\033\026\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\140\024\034" +
    "\025\033\026\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\144" +
    "\020\041\021\037\022\036\023\035\024\034\025\033\026" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\157\006\161\007\160\001\001\000\004\016" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\170\007\160\001\001\000\004\016\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\106\013\040\014\176\016\027\017\043\020" +
    "\041\021\037\022\036\023\035\024\034\025\033\026\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\106\013\040\014\201\016\027\017\043\020\041\021\037" +
    "\022\036\023\035\024\034\025\033\026\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\210\013\040\016\027\017\043\020" +
    "\041\021\037\022\036\023\035\024\034\025\033\026\032" +
    "\001\001\000\004\004\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\221\017\220\020\041\021\037\022\036\023\035\024\034" +
    "\025\033\026\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\224\020\041\021\037" +
    "\022\036\023\035\024\034\025\033\026\032\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= LDECS sep_di LINST 
            {
              Prog RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.programa(ldecs,linst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= LINST 
            {
              Prog RESULT =null;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.programa(null,linst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDECS ::= LDECS scol DEC 
            {
              LDecs RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(ldecs,dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDECS",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDECS ::= DEC 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDECS",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEC ::= var TIPO id 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_var(tipo,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= type TIPO id 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_type(tipo,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= proc id pap LPARAMS pcierre BLOQUE 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		LParams lparams = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc_con_params(id,lparams,b); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC ::= proc id pap pcierre BLOQUE 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc_sin_params(id,b); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LPARAMS ::= LPARAMS coma PARAM 
            {
              LParams RESULT =null;
		LParams lparams = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_params_muchos(lparams,param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPARAMS",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LPARAMS ::= PARAM 
            {
              LParams RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_params_uno(param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPARAMS",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAM ::= TIPO amp id 
            {
              Param RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_con_amp(t,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAM",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAM ::= TIPO id 
            {
              Param RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_sin_amp(t,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAM",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= r_bool 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_Bool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= r_real 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_Real(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= r_int 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_Entero(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= r_string 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_String(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= array cap ent ccierre of TIPO 
            {
              Tipo RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_Array(ent,t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= record llap CAMPOS llcierre 
            {
              Tipo RESULT =null;
		LCampos campos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipo_Reg(campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= pointer TIPO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_Puntero(t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= id 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_Id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CAMPOS ::= CAMPOS scol CAMPO 
            {
              LCampos RESULT =null;
		LCampos campos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_campos_muchos(campos,campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("CAMPOS",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CAMPOS ::= CAMPO 
            {
              LCampos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_campos_uno(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("CAMPOS",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CAMPO ::= TIPO id 
            {
              Campo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(t,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("CAMPO",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINST ::= LINST scol INST 
            {
              LInst RESULT =null;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_inst_muchas(linst,inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LINST",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LINST ::= INST 
            {
              LInst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_inst_una(inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LINST",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= E0 igual E0 
            {
              Inst RESULT =null;
		Exp e00 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e01 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_asig(e00,e01); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= r_if E0 then AUX_LINST endif 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInst_aux aux_l = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_if_then(e0,aux_l); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= r_if E0 then AUX_LINST r_else AUX_LINST endif 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		LInst_aux aux_l = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInst_aux aux_l_1 = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_if_then_else(e0,aux_l,aux_l_1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= r_while E0 r_do AUX_LINST endwhile 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInst_aux aux_l = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_while(e0,aux_l); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AUX_LINST ::= LINST 
            {
              LInst_aux RESULT =null;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.linst_aux(linst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("AUX_LINST",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AUX_LINST ::= 
            {
              LInst_aux RESULT =null;
		 RESULT = sem.linst_aux_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("AUX_LINST",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= read E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_read(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= write E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_read(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= nl 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= r_new E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_new(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= delete E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_delete(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= call id pap REAL_PARAMS pcierre 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LReal_params r_params = (LReal_params)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_call_con_params(id,r_params); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= call id pap pcierre 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.inst_call_sin_params(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= BLOQUE 
            {
              Inst RESULT =null;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_compuesta(b); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REAL_PARAMS ::= REAL_PARAMS coma E0 
            {
              LReal_params RESULT =null;
		LReal_params r_params = (LReal_params)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_real_params_muchos(r_params,e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("REAL_PARAMS",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REAL_PARAMS ::= E0 
            {
              LReal_params RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.l_real_params_uno(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("REAL_PARAMS",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= llap PROGRAMA llcierre 
            {
              Bloque RESULT =null;
		Prog p = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.bloque(p); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= llap llcierre 
            {
              Bloque RESULT =null;
		 RESULT = sem.bloque_vacio(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E0 ::= E1 mas E0 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("+",e1,e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E0 ::= E1 menos E1 
            {
              Exp RESULT =null;
		Exp e10 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e11 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("-",e10,e11); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e1; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E1 ::= E1 OP1AI E2 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,e1,e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e2; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E2 ::= E2 OP2AI E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,e2,e3); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e3; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E3 ::= E4 OP3NA E4 
            {
              Exp RESULT =null;
		Exp e40 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp e41 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,e40,e41); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e4; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E4 ::= menos E5 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.menos_unario(e5); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E4 ::= not E4 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.c_not(e4); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e5; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E5 ::= E5 cap E0 ccierre 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.index(e5,e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E5 ::= E5 punto id 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.punto(e5,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E5 flecha id 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.flecha(e5,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e6; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= por E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.indireccion(e6); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e7; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E7 ::= pap E0 pcierre 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = e0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= r_null 
            {
              Exp RESULT =null;
		 RESULT = sem.c_null(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= id 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.identificador(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= r_false 
            {
              Exp RESULT =null;
		 RESULT = sem.c_false(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= r_true 
            {
              Exp RESULT =null;
		 RESULT = sem.c_true(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= cadena 
            {
              Exp RESULT =null;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.c_str(cad); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= real 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.numReal(num); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= ent 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.numEnt(num); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP3NA ::= por 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3NA",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP3NA ::= div 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3NA",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP3NA ::= mod 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3NA",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP2AI ::= bne 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP2AI ::= beq 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2AI ::= ble 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2AI ::= bge 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP2AI ::= blt 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP2AI ::= bgt 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP1AI ::= and 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1AI",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP1AI ::= or 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1AI",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

