package asint;

import asint.TinyASint.Suma;
import asint.TinyASint.Tipo_Array;
import asint.TinyASint.Tipo_Id;
import asint.TinyASint.Tipo_Puntero;
import asint.TinyASint.Tipo_Reg;
import asint.TinyASint.Tipo_String;
import asint.TinyASint.Tipo_bool;
import asint.TinyASint.Tipo_int;
import asint.TinyASint.Tipo_real;
import asint.TinyASint.Resta;
import asint.TinyASint.Mul;
import asint.TinyASint.Not;
import asint.TinyASint.Div;
import asint.TinyASint.Flecha;
import asint.TinyASint.Id;
import asint.TinyASint.Index;
import asint.TinyASint.Indireccion;
import asint.TinyASint.Inst_asig;
import asint.TinyASint.Inst_call_con_params;
import asint.TinyASint.Inst_call_sin_params;
import asint.TinyASint.Inst_compuesta;
import asint.TinyASint.Inst_delete;
import asint.TinyASint.Inst_if_then;
import asint.TinyASint.Inst_if_then_else;
import asint.TinyASint.Inst_new;
import asint.TinyASint.Inst_nl;
import asint.TinyASint.Inst_read;
import asint.TinyASint.Inst_while;
import asint.TinyASint.Inst_write;
import asint.TinyASint.LCampos_muchos;
import asint.TinyASint.LCampos_uno;
import asint.TinyASint.LDecs_muchas;
import asint.TinyASint.LDecs_una;
import asint.TinyASint.LInst_aux_llena;
import asint.TinyASint.LInst_aux_vacia;
import asint.TinyASint.LParams_muchos;
import asint.TinyASint.LParams_uno;
import asint.TinyASint.LReal_Params_muchos;
import asint.TinyASint.LReal_Params_uno;
import asint.TinyASint.Lista_inst_muchas;
import asint.TinyASint.Lista_inst_una;
import asint.TinyASint.Menos_unario;
import asint.TinyASint.Mod;
import asint.TinyASint.Num;
import asint.TinyASint.Or;
import asint.TinyASint.Param_amp;
import asint.TinyASint.Param_sin_amp;
import asint.TinyASint.Prog_con_decs;
import asint.TinyASint.Prog_sin_decs;
import asint.TinyASint.Punto;
import asint.TinyASint.And;
import asint.TinyASint.Beq;
import asint.TinyASint.Bge;
import asint.TinyASint.Bgt;
import asint.TinyASint.Ble;
import asint.TinyASint.Bloque_lleno;
import asint.TinyASint.Bloque_vacio;
import asint.TinyASint.Blt;
import asint.TinyASint.Bne;
import asint.TinyASint.Campo;
import asint.TinyASint.Dec_Proc_con_params;
import asint.TinyASint.Dec_Proc_sin_params;
import asint.TinyASint.Dec_Type;
import asint.TinyASint.Dec_Var;
import asint.TinyASint.R_false;
import asint.TinyASint.R_null;
import asint.TinyASint.R_str;
import asint.TinyASint.R_true;


public interface Procesamiento {
    void procesa(Suma exp);
    void procesa(Resta exp);
    void procesa(Mul exp);
    void procesa(Div exp);
    void procesa(Id exp);
    void procesa(Num exp);
    void procesa(Dec_Var dec_var);
	void procesa(Menos_unario menos_unario);
	void procesa(Not not);
	void procesa(Beq beq);
	void procesa(Bne bne);
	void procesa(Bge bge);
	void procesa(Ble ble);
	void procesa(Blt blt);
	void procesa(Bgt bgt);
	void procesa(And and);
	void procesa(Or or);
	void procesa(R_true r_true);
	void procesa(R_false r_false);
	void procesa(LDecs_una lDecs_una);
	void procesa(LDecs_muchas lDecs_muchas);
	void procesa(Lista_inst_una lista_inst_una);
	void procesa(Lista_inst_muchas lista_inst_muchas);
	void procesa(Prog_con_decs prog);
	void procesa(Prog_sin_decs prog);
	void procesa(Inst_asig inst);
	void procesa(Tipo_int tipo_int);
	void procesa(Tipo_real tipo_real);
	void procesa(Tipo_bool tipo_bool);
	void procesa(Tipo_String tipo_String);
	void procesa(Tipo_Id tipo_Id);
	void procesa(Tipo_Puntero tipo_Puntero);
	void procesa(Tipo_Array tipo_Array);
	void procesa(Tipo_Reg tipo_Reg);
	void procesa(LCampos_uno lCampos_uno);
	void procesa(LCampos_muchos lCampos_muchos);
	void procesa(Campo campo);
	void procesa(LInst_aux_vacia lInst_aux_vacia);
	void procesa(LInst_aux_llena lInst_aux_llena);
	void procesa(LReal_Params_uno lReal_Params_uno);
	void procesa(LReal_Params_muchos lReal_Params_muchos);
	void procesa(Param_sin_amp param_sin_amp);
	void procesa(Param_amp param_amp);
	void procesa(Bloque_lleno bloque_lleno);
	void procesa(Bloque_vacio bloque_vacio);
	void procesa(LParams_muchos lParams_muchos);
	void procesa(LParams_uno lParams_uno);
	void procesa(Mod mod);
	void procesa(R_null r_null);
	void procesa(R_str r_str);
	void procesa(Index index);
	void procesa(Indireccion indireccion);
	void procesa(Punto punto);
	void procesa(Flecha flecha);
	void procesa(Dec_Proc_sin_params dec_Proc_sin_params);
	void procesa(Dec_Proc_con_params dec_Proc_con_params);
	void procesa(Dec_Type dec_Type);
	void procesa(Inst_if_then inst_if_then);
	void procesa(Inst_if_then_else inst_if_then_else);
	void procesa(Inst_while inst_while);
	void procesa(Inst_read inst_read);
	void procesa(Inst_write inst_write);
	void procesa(Inst_nl inst_nl);
	void procesa(Inst_new inst_new);
	void procesa(Inst_delete inst_delete);
	void procesa(Inst_call_con_params inst_call_con_params);
	void procesa(Inst_call_sin_params inst_call_sin_params);
	void procesa(Inst_compuesta inst_compuesta);  
}