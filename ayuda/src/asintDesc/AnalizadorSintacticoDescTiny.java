/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoDescTiny.java */
package asintDesc;

public class AnalizadorSintacticoDescTiny implements AnalizadorSintacticoDescTinyConstants {

  final public void SP() throws ParseException {
    PROGRAMA();
    jj_consume_token(0);
  }

  final public void PROGRAMA() throws ParseException {
    LDECS();
    LINST();
  }

  final public void LDECS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
    case type:
    case proc:
      DECS();
      jj_consume_token(46);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void DECS() throws ParseException {
    DEC();
    RDECS();
  }

  final public void RDECS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      DEC();
      RDECS();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void DEC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      DEC_VAR();
      break;
    case type:
      DEC_TIPO();
      break;
    case proc:
      DEC_PROC();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DEC_VAR() throws ParseException {
    jj_consume_token(var);
    TIPO();
    jj_consume_token(identificador);
  }

  final public void DEC_TIPO() throws ParseException {
    jj_consume_token(type);
    TIPO();
    jj_consume_token(identificador);
  }

  final public void DEC_PROC() throws ParseException {
    jj_consume_token(proc);
    jj_consume_token(identificador);
    PARAMS();
    BLOQUE();
  }

  final public void PARAMS() throws ParseException {
    jj_consume_token(48);
    LPARAMS();
    jj_consume_token(49);
  }

  final public void LPARAMS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_int:
    case r_real:
    case r_bool:
    case r_string:
    case array:
    case record:
    case pointer:
    case identificador:
      PARAM();
      RLPARAMS();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void RLPARAMS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      PARAM();
      RLPARAMS();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void PARAM() throws ParseException {
    TIPO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(identificador);
  }

  final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_int:
    case r_real:
    case r_bool:
    case r_string:
      TIPO_BASICO();
      break;
    case array:
      TIPO_ARRAY();
      break;
    case record:
      TIPO_REG();
      break;
    case pointer:
      TIPO_PUNT();
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_BASICO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_int:
      jj_consume_token(r_int);
      break;
    case r_real:
      jj_consume_token(r_real);
      break;
    case r_bool:
      jj_consume_token(r_bool);
      break;
    case r_string:
      jj_consume_token(r_string);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_ARRAY() throws ParseException {
    jj_consume_token(array);
    jj_consume_token(52);
    jj_consume_token(numeroEntero);
    jj_consume_token(53);
    jj_consume_token(of);
    TIPO();
  }

  final public void TIPO_REG() throws ParseException {
    jj_consume_token(record);
    jj_consume_token(54);
    CAMPOS();
    jj_consume_token(55);
  }

  final public void TIPO_PUNT() throws ParseException {
    jj_consume_token(pointer);
    TIPO();
  }

  final public void CAMPOS() throws ParseException {
    CAMPO();
    RCAMPOS();
  }

  final public void RCAMPOS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      CAMPO();
      RCAMPOS();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void CAMPO() throws ParseException {
    TIPO();
    jj_consume_token(identificador);
  }

  final public void LINST() throws ParseException {
    INST();
    RLINST();
  }

  final public void RLINST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      INST();
      RLINST();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  final public void INST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case not:
    case r_true:
    case r_false:
    case r_null:
    case identificador:
    case numeroEntero:
    case numeroReal:
    case str:
    case 48:
    case 58:
    case 59:
      INST_ASIG();
      break;
    case r_if:
      INST_IF();
      break;
    case r_while:
      INST_WHILE();
      break;
    case read:
      INST_READ();
      break;
    case write:
      INST_WRITE();
      break;
    case nl:
      INST_NL();
      break;
    case r_new:
      INST_NEW();
      break;
    case delete:
      INST_DELETE();
      break;
    case call:
      INST_CALL();
      break;
    case 54:
      INST_COMPUESTA();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void INST_ASIG() throws ParseException {
    E0();
    jj_consume_token(56);
    E0();
  }

  final public void INST_IF() throws ParseException {
    jj_consume_token(r_if);
    E0();
    jj_consume_token(then);
    AUX_LINST();
    RES_IF();
    jj_consume_token(endif);
  }

  final public void RES_IF() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_else:
      jj_consume_token(r_else);
      AUX_LINST();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void INST_WHILE() throws ParseException {
    jj_consume_token(r_while);
    E0();
    jj_consume_token(r_do);
    AUX_LINST();
    jj_consume_token(endwhile);
  }

  final public void AUX_LINST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_if:
    case r_while:
    case read:
    case write:
    case nl:
    case r_new:
    case delete:
    case call:
    case not:
    case r_true:
    case r_false:
    case r_null:
    case identificador:
    case numeroEntero:
    case numeroReal:
    case str:
    case 48:
    case 54:
    case 58:
    case 59:
      LINST();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void INST_READ() throws ParseException {
    jj_consume_token(read);
    E0();
  }

  final public void INST_WRITE() throws ParseException {
    jj_consume_token(write);
    E0();
  }

  final public void INST_NL() throws ParseException {
    jj_consume_token(nl);
  }

  final public void INST_NEW() throws ParseException {
    jj_consume_token(r_new);
    E0();
  }

  final public void INST_DELETE() throws ParseException {
    jj_consume_token(delete);
    E0();
  }

  final public void INST_CALL() throws ParseException {
    jj_consume_token(call);
    jj_consume_token(identificador);
    jj_consume_token(48);
    REAL_PARAMS();
    jj_consume_token(49);
  }

  final public void REAL_PARAMS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case not:
    case r_true:
    case r_false:
    case r_null:
    case identificador:
    case numeroEntero:
    case numeroReal:
    case str:
    case 48:
    case 58:
    case 59:
      E0();
      RES_PARAMS();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void RES_PARAMS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      E0();
      RES_PARAMS();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void INST_COMPUESTA() throws ParseException {
    BLOQUE();
  }

  final public void BLOQUE() throws ParseException {
    jj_consume_token(54);
    PROGRAMA();
    jj_consume_token(55);
  }

  final public void E0() throws ParseException {
    E1();
    RES0();
  }

  final public void RES0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      E0();
      break;
    case 58:
      jj_consume_token(58);
      E1();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    RES1();
  }

  final public void RES1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
    case or:
      OP1AI();
      E2();
      RES1();
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    RES2();
  }

  final public void RES2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
      OP2AI();
      E3();
      RES2();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    RES3();
  }

  final public void RES3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
    case 66:
    case 67:
      OP3NA();
      E4();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      E5();
      break;
    case not:
      jj_consume_token(not);
      E4();
      break;
    case r_true:
    case r_false:
    case r_null:
    case identificador:
    case numeroEntero:
    case numeroReal:
    case str:
    case 48:
    case 59:
      E5();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E5() throws ParseException {
    E6();
    RES5();
  }

  final public void RES5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case punto:
    case flecha:
      OP5A1();
      E6();
      RES5();
      break;
    case 52:
      OP5A2();
      E6();
      jj_consume_token(53);
      RES5();
      break;
    default:
      jj_la1[20] = jj_gen;

    }
  }

  final public void E6() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      E6();
      break;
    case r_true:
    case r_false:
    case r_null:
    case identificador:
    case numeroEntero:
    case numeroReal:
    case str:
    case 48:
      E7();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numeroEntero:
      jj_consume_token(numeroEntero);
      break;
    case numeroReal:
      jj_consume_token(numeroReal);
      break;
    case str:
      jj_consume_token(str);
      break;
    case r_true:
      jj_consume_token(r_true);
      break;
    case r_false:
      jj_consume_token(r_false);
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    case r_null:
      jj_consume_token(r_null);
      break;
    case 48:
      jj_consume_token(48);
      E0();
      jj_consume_token(49);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP1AI() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      jj_consume_token(and);
      break;
    case or:
      jj_consume_token(or);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP2AI() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      jj_consume_token(60);
      break;
    case 61:
      jj_consume_token(61);
      break;
    case 62:
      jj_consume_token(62);
      break;
    case 63:
      jj_consume_token(63);
      break;
    case 64:
      jj_consume_token(64);
      break;
    case 65:
      jj_consume_token(65);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP3NA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      break;
    case 66:
      jj_consume_token(66);
      break;
    case 67:
      jj_consume_token(67);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP5A1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case punto:
      jj_consume_token(punto);
      break;
    case flecha:
      jj_consume_token(flecha);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP5A2() throws ParseException {
    jj_consume_token(52);
  }

  public AnalizadorSintacticoDescTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1c00,0x0,0x1c00,0x1be000,0x0,0x0,0x1be000,0x1e000,0x0,0x0,0xf2200000,0x1000000,0xf2200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x8000,0x0,0x400,0x40000,0x80000,0x400,0x0,0x8000,0x8000,0xc413c3f,0x0,0xc413c3f,0xc013c3c,0x40000,0x6000000,0xc0,0xf0000000,0x8000000,0xc013c3c,0x100300,0x8013c38,0x13c38,0xc0,0xf0000000,0x8000000,0x300,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xc,0x0,0x0,0x0,0x0,0x0,0x3,0xc,0x0,};
   }

  public AnalizadorSintacticoDescTiny(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoDescTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoDescTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoDescTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoDescTiny(AnalizadorSintacticoDescTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoDescTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[68];
    for (int i = 0; i < 68; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                                           }
